# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  name: 'Google Cloud'
  demands: 
    - Environment -equals staging

variables:
  GLOBAL_S_USERNAME: $(S_USERNAME)
  GLOBAL_S_PASSWORD: $(S_PASSWORD)

steps:

- task: Bash@3
  displayName: "Get unity version"
  inputs:
    targetType: inline
    script: |
      export PROJECT_VERSION=$(cat ProjectVersion.txt | grep m_EditorVersion: | sed "s/m_EditorVersion: //g")
      export IMAGE_NAME=gableroux/unity3d:$PROJECT_VERSION$(PLATFORM)
      echo $IMAGE_NAME
      echo "##vso[task.setvariable variable=IMAGE_NAME;]$IMAGE_NAME"
    workingDirectory: '$(Build.SourcesDirectory)/MusicTV/SongQuiz/ProjectSettings'

- task: Bash@3
  displayName: "Build unity project using docker"
  inputs:
    targetType: 'inline'
    script: |      
      chmod -R +x .
      export UNITY_LICENSE_CONTENT=$(cat Unity_v2019.x.ulf)
      docker run -e BUILD_NAME -e UNITY_LICENSE_CONTENT -e BUILD_TARGET -e UNITY_USERNAME -e UNITY_PASSWORD -w /project/ -v $(Build.SourcesDirectory)/MusicTV/SongQuiz/:/project/ $IMAGE_NAME  /bin/bash -c "/project/unity-build/before_script.sh && /project/unity-build/build.sh"
    workingDirectory: '$(Build.SourcesDirectory)/MusicTV/SongQuiz/unity-build'
    failOnStderr: false
  env:
    UNITY_USERNAME: $(U_USERNAME)
    UNITY_PASSWORD: $(U_PASSWORD)
    BUILD_TARGET: StandaloneWindows64
    BUILD_NAME: verse.surf

- task: Bash@3
  displayName: "Push build to Steam"
  inputs:
    targetType: inline
    script: |
      steamcmd +login '$(GLOBAL_S_USERNAME)' '$(GLOBAL_S_PASSWORD)' +run_app_build_http '$(Build.SourcesDirectory)/Infrastructure/steampipe/scripts/app_build_1315390_beta.vdf' +quit
    workingDirectory: 


- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.SourcesDirectory)/MusicTV/SongQuiz/Builds/StandaloneWindows64'
    artifact: 'verse.surf-StandaloneWindows64'
    publishLocation: 'pipeline'

- task: Bash@3
  displayName: Cleanup
  inputs:
    targetType: inline
    script: |
      sudo git clean -ffdx
      docker image prune -f
      docker container prune -f
    workingDirectory: '$(Build.SourcesDirectory)'
