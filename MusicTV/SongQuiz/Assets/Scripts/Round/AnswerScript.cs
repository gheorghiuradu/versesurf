using Assets.Scripts.Reusable;
using Assets.Scripts.Services;
using SharedDomain;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.UI.Extensions;

namespace Assets.Scripts.Round
{
    public class AnswerScript : MonoBehaviour
    {
        private const string VotePrefab = "Prefabs/Vote";
        private const string AnswerPrefab = "Prefabs/Answer";

        public RectTransform VoteGrid;
        public TextMeshProUGUI TextTMP;
        public GameObject PlayerNameContainer;
        public TextMeshProUGUI PlayerName;
        public TextMeshProUGUI PointsTMP;

        private ConcurrentDictionary<string, VoteScript> votes;
        private Answer answer;
        private Animator animator;
        private AudioSource audioSource;
        private Image image;
        private RectTransform answerPositionReference;
        private NicerOutline outline;

        public string AnswerId => this.answer.Id;
        public int VoteCount => this.votes.Count;
        public string AnswerText => this.answer?.Name;
        public bool IsAutoGenerated => this.answer.IsAutoGenerated;
        public List<PlayerScript> AuthorPlayerScripts { get; private set; }
        public List<PlayerScript> VotePlayerScripts { get; private set; }
        public bool IsCorrect { get; private set; }

        private void Start()
        {
            this.votes = new ConcurrentDictionary<string, VoteScript>();
            this.VotePlayerScripts = new List<PlayerScript>();
            this.animator = this.GetComponent<Animator>();
            this.audioSource = this.GetComponent<AudioSource>();
            this.image = this.GetComponent<Image>();
            this.outline = this.GetComponent<NicerOutline>();
            this.answerPositionReference = GameObject.FindGameObjectWithTag("PositionReference").GetComponent<RectTransform>();
        }

        public void LoadAnswer(Answer answer, IEnumerable<PlayerScript> authorScripts, bool isCorrect = false)
        {
            this.answer = answer;
            this.TextTMP.text = this.AnswerText;
            this.IsCorrect = isCorrect;
            if (!isCorrect)
            {
                this.AuthorPlayerScripts = authorScripts.ToList();
            }
            this.gameObject.SetActive(true);
        }

        public void AddVote(Vote<Answer> vote)
        {
            var prefab = Resources.Load<GameObject>(VotePrefab);
            prefab.SetActive(false);

            var newVote = GameObject.Instantiate(prefab, this.VoteGrid);
            newVote.GetComponent<VoteScript>().PlayerName.text = vote.By.Nick;
            this.votes.TryAdd(vote.By.Id, newVote.GetComponent<VoteScript>());
        }

        public async Task ShowVotes()
        {
            var rectTransform = this.GetComponent<RectTransform>();

            this.audioSource.PlayOneShot(Resources.Load<AudioClip>(Constants.WhooshSlowDeep09SoundPath));

            this.transform.SetParent(GameObject.FindObjectOfType<Canvas>().transform);
            this.transform.SetAsLastSibling();

            await rectTransform.AnimateMoveTowardsAsync(this.answerPositionReference.position, 1.2f, 7);

            if (this.votes.Count > 0)
            {
                this.VoteGrid.gameObject.SetActive(true);
                foreach (var vote in this.votes.Values)
                {
                    await vote.ShowAsync();
                }
            }

            var cashRegisterSound = Constants.AudioClips.GetCashRegisterSound();
            await new WaitForSeconds(0.7f); // Wait a bit before revealing the points

            if (this.IsCorrect)
            {
                this.PlayerName.text = "Correct lyric";
                this.PlayerNameContainer.SetActive(true);

                this.image.color = Constants.Colors.CorrectAnswerBackground;
                this.outline.effectColor = Constants.Colors.CorrectAnswerBorder;
                this.PlayerNameContainer.GetComponent<Image>().color = Constants.Colors.CorrectAnswerBorder;
                this.PlayerName.color = Constants.Colors.CorrectAnswerBackground;
                this.TextTMP.color = Constants.Colors.CorrectAnswerText;
                this.VoteGrid.GetComponent<Image>().color = Constants.Colors.CorrectAnswerBorder;

                foreach (var vote in this.votes.Values)
                {
                    foreach (var playerScript in this.VotePlayerScripts)
                    {
                        vote.ShowCorrectAsync(Constants.CorrectAnswerPoints).CatchErrors();
                    }
                }
                if (this.votes.Count > 0)
                {
                    this.audioSource.PlayOneShot(cashRegisterSound);
                }

                await new WaitForSeconds(2.5f);
                this.gameObject.SetActive(false);
                return;
            }

            for (int i = 0; i < this.AuthorPlayerScripts.Count; i++)
            {
                var authorScript = this.AuthorPlayerScripts[i];
                if (i > 0)
                {
                    this.PlayerName.text = "ALSO";
                    await new WaitForSeconds(1f);
                }
                this.PlayerName.text = $"{authorScript.PlayerNick}'s lyric".ToUpper();
                if (!this.PlayerNameContainer.activeSelf) this.PlayerNameContainer.SetActive(true);

                var totalScore = this.votes.Sum(_ => this.IsAutoGenerated ? Constants.VotePoints / 2 : Constants.VotePoints);
                this.PointsTMP.text = $"+{totalScore}";
                this.PointsTMP.gameObject.SetActive(true);
                this.audioSource.PlayOneShot(cashRegisterSound);

                await new WaitForSeconds(2.5f);
            }

            this.gameObject.SetActive(false);
        }

        public async Task ShrinkAsync()
        {
            var clip = System.Array.Find(this.animator.runtimeAnimatorController.animationClips,
                a => a.name.Contains("ShrinkAnswer"));

            animator.Play(clip.name);

            await new WaitForSeconds(clip.length);
        }

        public async Task GrowBackAsync()
        {
            var clip = System.Array.Find(this.animator.runtimeAnimatorController.animationClips,
                a => a.name.Contains("GrowAnswerToNormal"));

            animator.Play(clip.name);
            await new WaitForSeconds(clip.length);
        }

        public static AnswerScript Instantiate(
            Answer answer,
            Transform parent,
            IEnumerable<PlayerScript> authorScripts,
            bool isCorrect = false)
        {
            var prefab = Resources.Load<GameObject>(AnswerPrefab);
            var instance = GameObject.Instantiate(prefab, parent).GetComponent<AnswerScript>();
            instance.LoadAnswer(answer, authorScripts, isCorrect);

            return instance;
        }
    }
}