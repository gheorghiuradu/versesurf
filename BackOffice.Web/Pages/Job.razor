@page "/jobs/{JobId}";
@using TaskService;
@using System.Threading;
@using TaskService.Jobs;
@using System.Reactive.Linq;
@implements IDisposable;
@inject JobService jobService;

<h3>Job</h3>
<h5>@this.lastReport.DisplayName</h5>
<div class="progress" style="height: 30px;">
    <div class="progress-bar @this.GetColorByStatus(lastReport.Status)"
         role="progressbar"
         style="width: @this.lastReport.Value.ToString()%;"
         aria-valuenow="@this.lastReport.Value.ToString()"
         aria-valuemax="100"
         aria-valuemin="0">
        @this.lastReport.Value.ToString()%
    </div>
</div>
<Button Variant="@ButtonVariant.Contained"
        Color="Color.Secondary"
        OnClick="@(e => this.CancelJob())"
        Context="CancelButtonContext">
    <StartIcon>
        <RemoveIcon />
    </StartIcon>
    <ChildContent>
        Cancel
    </ChildContent>
</Button>
@this.lastReport.Status.ToString()
@if (this.lastReport.Status == JobStatus.Completed)
{
    var result = this.jobService.TryGetResult<Uri>(this.JobId);
    if (!(result is null))
    {
        <a href="@result" download>Result</a>
    }
}
<textarea readonly style="width: 100%; height: 100px;">
    @string.Join(Environment.NewLine, this.allMessages)
</textarea>

@code {
    [Parameter]
    public string JobId { get; set; }
    private ProgressReport lastReport;
    private IDisposable subscription;
    private List<string> allMessages = new List<string>();
    private readonly SemaphoreSlim signal = new SemaphoreSlim(1);

    protected override void OnInitialized()
    {
        this.lastReport = this.jobService.GetLatestReports().FirstOrDefault(pr => string.Equals(pr.JobId, this.JobId));
        this.subscription = this.jobService.ProgressUpdates
            .Where(pr => string.Equals(pr.JobId, this.JobId))
            .Subscribe(this.ProcessReport);
        base.OnInitialized();
    }

    public void Dispose()
    {
        this.subscription.Dispose();
        this.signal.Dispose();

    }

    private string GetColorByStatus(JobStatus jobStatus)
    {
        var color = jobStatus switch
        {
            JobStatus.NotStarted => string.Empty,
            JobStatus.Running => "bg-info",
            JobStatus.Canceled => "bg-warning",
            JobStatus.Failed => "bg-danger",
            JobStatus.Completed => "bg-success",
            _ => string.Empty
        };

        return color;
    }

    private async void ProcessReport(ProgressReport report)
    {

        await this.signal.WaitAsync().ConfigureAwait(false);
        try
        {
            await this.InvokeAsync(() =>
            {
                this.lastReport = report;
                this.allMessages.Add(report.Message);
                this.StateHasChanged();
            });

        }
        finally
        {
            this.signal.Release();

        }

    }

    private void CancelJob()
    {
        this.jobService.CancelJob(this.JobId);
    }

}